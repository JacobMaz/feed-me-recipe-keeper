[{"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/index.tsx":"1","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/reportWebVitals.ts":"2","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/App.tsx":"3","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/Main.tsx":"4","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/Home.tsx":"5","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/Navbar.tsx":"6","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/auth/SignUp.tsx":"7","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/auth/Auth.tsx":"8","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/auth/SignUpIndex.tsx":"9","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/auth/Login.tsx":"10","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/auth/LoginIndex.tsx":"11","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/BottomNav.tsx":"12","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/AppIndex.tsx":"13","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/CreateRecipe.tsx":"14","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/CreateRecipeIndex.tsx":"15","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/GetRecipeIndex.tsx":"16","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/GetRecipe.tsx":"17","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/UserRecipesIndex.tsx":"18","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/UserRecipes.tsx":"19","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/EditRecipeIndex.tsx":"20","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/ingredient/CreateIngredient.tsx":"21","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/ingredient/CreateIngredientIndex.tsx":"22","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/ingredient/GetIngredient.tsx":"23","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/ingredient/GetIngredientIndex.tsx":"24","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/ingredient/EditIngredient.tsx":"25","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/helpers/environment.js":"26"},{"size":500,"mtime":1608661788201,"results":"27","hashOfConfig":"28"},{"size":425,"mtime":1608661788202,"results":"29","hashOfConfig":"28"},{"size":201,"mtime":1610540311300,"results":"30","hashOfConfig":"28"},{"size":2337,"mtime":1610547715563,"results":"31","hashOfConfig":"28"},{"size":1607,"mtime":1610540311304,"results":"32","hashOfConfig":"28"},{"size":1732,"mtime":1610547715563,"results":"33","hashOfConfig":"28"},{"size":1255,"mtime":1610547715564,"results":"34","hashOfConfig":"28"},{"size":1250,"mtime":1610544600347,"results":"35","hashOfConfig":"28"},{"size":4152,"mtime":1610547715565,"results":"36","hashOfConfig":"28"},{"size":1241,"mtime":1610547715564,"results":"37","hashOfConfig":"28"},{"size":3232,"mtime":1610547715564,"results":"38","hashOfConfig":"28"},{"size":1694,"mtime":1610540311304,"results":"39","hashOfConfig":"28"},{"size":1177,"mtime":1610547715563,"results":"40","hashOfConfig":"28"},{"size":1274,"mtime":1610540311307,"results":"41","hashOfConfig":"28"},{"size":5181,"mtime":1610540311307,"results":"42","hashOfConfig":"28"},{"size":4047,"mtime":1610547715566,"results":"43","hashOfConfig":"28"},{"size":1175,"mtime":1610547715566,"results":"44","hashOfConfig":"28"},{"size":14263,"mtime":1610540311309,"results":"45","hashOfConfig":"28"},{"size":1257,"mtime":1610540311308,"results":"46","hashOfConfig":"28"},{"size":3933,"mtime":1610474010113,"results":"47","hashOfConfig":"28"},{"size":1118,"mtime":1610464650859,"results":"48","hashOfConfig":"28"},{"size":4391,"mtime":1610540311309,"results":"49","hashOfConfig":"28"},{"size":1691,"mtime":1610464650860,"results":"50","hashOfConfig":"28"},{"size":2599,"mtime":1610474010114,"results":"51","hashOfConfig":"28"},{"size":2799,"mtime":1610478777303,"results":"52","hashOfConfig":"28"},{"size":332,"mtime":1610541667191,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"uwxj1q",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"114"},"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/index.tsx",[],["115","116"],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/reportWebVitals.ts",[],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/App.tsx",[],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/Main.tsx",[],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/Home.tsx",["117"],"import { createStyles, makeStyles } from '@material-ui/core/styles'\nimport { Container, Button } from '@material-ui/core'\nimport { Link } from 'react-router-dom';\nimport feedMeLogo from '../assets/feedmelogo.png'\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        container: {\n            // marginTop: '5em',\n            background: 'rgba(50, 50, 50, 0.5)',\n            display: 'flex',\n                justifyContent: 'center',\n                alignContent: 'center',\n            height: '50vh',\n            width: '50vw',\n            border: '5px solid #FFAE6C',\n            borderRadius: '5px'\n        },\n        homeDiv: {\n            display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                flexDirection: 'column'\n        },\n        link: {\n            textDecoration: 'none'\n        },\n        button: {\n            backgroundColor: '#FFAE6C',\n            color: '#000A29',\n            '&:hover': {\n                backgroundColor: '#DF6400',\n              },\n            },\n    }),\n);\n\nconst Home = () => {\n    const classes = useStyles();\n\n    return (\n        <Container className={classes.container}>\n            <div className={classes.homeDiv}>\n                <div>\n                    <img src={feedMeLogo} />\n                </div>\n                <div>\n                    <Link to='/getRecipe' className={classes.link}>\n                        <Button className={classes.button}>All Recipes</Button>\n                    </Link>\n                </div>\n            </div>\n        </Container>\n    )\n}\n\nexport default Home;","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/Navbar.tsx",["118","119"],"import React from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\nimport { AppBar, Toolbar } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Auth from './auth/Auth';\nimport { Link } from 'react-router-dom';\nimport ClearToken from './interface/ClearToken'\nimport smallFeedMeLogo from '../assets/smallfeedmelogo.png'\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        logSignButtons: {\n            display: 'flex',\n            justifyContent: 'flex-end',\n        },\n        appBar: {\n            backgroundColor: '#000A29',\n        },\n        feedMeLogo: {\n            height: '2.2em',\n            width:  '2.2em'\n        },\n        title: {\n            display: 'flex',\n            justifyContent: 'center',\n            color: '#FFAE6C'\n        },\n        logo: {\n            display: 'flex',\n            alignItems: 'center'\n        }\n    }),\n);\n\nconst NavbBar = (props: ClearToken) => {\n    const classes = useStyles();\n\n    return (\n        <AppBar position='fixed' className={classes.appBar} >\n            <Toolbar>\n                <Grid container spacing={3}>\n                    <Grid item xs className={classes.logo}>\n                        <Link to='/'><img src={smallFeedMeLogo} className={classes.feedMeLogo}/></Link>\n                    </Grid>\n                    <Grid item xs={6} className={classes.title}>\n                        <h2>Feed Me: Recipe Keeper</h2>\n                    </Grid>\n                    <Grid item xs className={classes.logSignButtons}>\n                        <Auth clearToken={props.clearToken} />\n                    </Grid>\n                </Grid>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default NavbBar;","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/auth/SignUp.tsx",[],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/auth/Auth.tsx",[],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/auth/SignUpIndex.tsx",["120"],"import React, { Component } from 'react';\nimport { TextField, Button} from '@material-ui/core';\nimport { createStyles, withStyles, WithStyles } from \"@material-ui/core/styles\";\nimport APIURL from '../../helpers/environment';\nimport { Home } from '@material-ui/icons';\n\ninterface SignUpState {\n    firstName: string,\n    lastName: string,\n    userName: string,\n    email: string,\n    password: string,\n}\n\nconst styles =()=>\n    createStyles({\n        form: {\n            display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'space-around',\n                flexWrap: 'wrap',\n            height: '23em'\n        },\n        button: {\n            backgroundColor: '#FFAE6C',\n            width: '10em',\n            color: '#000A29',\n            '&:hover': {\n                backgroundColor: '#DF6400',\n              },\n            },\n        input: {\n            backgroundColor: '#FFAE6C',\n            borderRadius: '6px',\n            \"& label.Mui-focused\": {\n              color: \"#000A29\",\n            },\n            \"& .MuiInput-underline:after\": {\n              color: '#000A29'\n            },\n            \"& .MuiOutlinedInput-root\": {\n              \"& fieldset\": {\n                borderColor: \"#000A29\",\n                color: '#000A29'\n              },\n              \"&:hover fieldset\": {\n                borderColor: \"#D76100\",\n                color: '#000A29'\n              },\n              \"&.Mui-focused fieldset\": {\n                borderColor: \"#FFE500\",\n                color: '#000A29'\n              }\n            }\n          }\n    })\n\ninterface UpdateToken extends WithStyles<typeof styles> {\n        updateToken: (newToken: string) => void\n    }\n\nclass SignUpIndex extends Component<UpdateToken, SignUpState>{\n    constructor(props: UpdateToken) {\n        super(props)\n        this.state = {\n            firstName: '',\n            lastName: '',\n            userName: '',\n            email: '',\n            password: '',\n        }\n        // this.updateToken = this.props.updateToken.bind(this)\n    }\n\n    signUpUser(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        fetch(`${APIURL}/user/register`, {\n            method: 'POST',\n            body: JSON.stringify({\n                firstName: this.state.firstName,\n                lastName: this.state.lastName,\n                userName: this.state.userName,\n                email: this.state.email,\n                password: this.state.password\n            }),\n            headers: new Headers({\n                'Content-Type': 'application/json'\n            })\n        }).then((response) => response.json())\n            .then((data) => {\n                this.props.updateToken(data.token)\n            //    console.log(data.token)\n            })\n    }\n\n    render() {\n        const{classes} = this.props\n        return (\n            <div>\n                <form onSubmit={(e)=>this.signUpUser(e)}  className={classes.form} >\n                    <TextField required className={classes.input} id=\"outlined-basic\" label=\"First Name\" variant=\"outlined\" onChange={(e)=>this.setState({firstName: (e.target.value)})} />\n                    <TextField required className={classes.input} id=\"outlined-basic\" label=\"Last Name\" variant=\"outlined\" onChange={(e)=>this.setState({lastName: (e.target.value)})} />\n                    <TextField required className={classes.input} id=\"outlined-basic\" label=\"Username\" variant=\"outlined\" onChange={(e)=>this.setState({userName: (e.target.value)})} />\n                    <TextField required className={classes.input} type='email' id=\"outlined-basic\" label=\"Email\" variant=\"outlined\" onChange={(e)=>this.setState({email: (e.target.value)})} />\n                    <TextField required className={classes.input} type='password' id=\"outlined-basic\" label=\"Password\" variant=\"outlined\" onChange={(e)=>this.setState({password: (e.target.value)})} />\n                    <Button className={classes.button} type='submit' variant=\"contained\">Register</Button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default withStyles(styles)(SignUpIndex)","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/auth/Login.tsx",[],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/auth/LoginIndex.tsx",["121"],"import React, { Component } from 'react';\nimport { createStyles, withStyles, WithStyles } from \"@material-ui/core/styles\";\nimport { TextField, Button } from '@material-ui/core';\nimport APIURL from '../../helpers/environment';\nimport { Link } from 'react-router-dom';\n// import {Redirect} from 'react-router-dom';\n\ninterface LoginState {\n    userName: string,\n    password: string\n}\n\nconst styles =()=>\n    createStyles({\n        form: {\n            display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'space-around',\n            height: '15em'\n        },\n        button: {\n            backgroundColor: '#FFAE6C',\n            width: '10em',\n            color: '#000A29',\n            '&:hover': {\n                backgroundColor: '#DF6400',\n              },\n            },\n        input: {\n            backgroundColor: '#FFAE6C',\n            borderRadius: '6px',\n            \"& label.Mui-focused\": {\n              color: \"#000A29\",\n            },\n            \"& .MuiInput-underline:after\": {\n              color: '#000A29'\n            },\n            \"& .MuiOutlinedInput-root\": {\n              \"& fieldset\": {\n                borderColor: \"#000A29\",\n                color: '#000A29'\n              },\n              \"&:hover fieldset\": {\n                borderColor: \"#D76100\",\n                color: '#000A29'\n              },\n              \"&.Mui-focused fieldset\": {\n                borderColor: \"#FFE500\",\n                color: '#000A29'\n              }\n            }\n          }\n    })\n\ninterface UpdateToken extends WithStyles<typeof styles> {\n    updateToken: (newToken: string) => void\n}\n\nclass LoginIndex extends Component<UpdateToken, LoginState>{\n    constructor(props: UpdateToken){\n        super(props)\n        this.state ={\n            userName: '',\n            password: ''\n        }\n    }\n\n    loginUser(e: React.FormEvent<HTMLFormElement> ){\n        e.preventDefault();\n        fetch(`${APIURL}/user/login`, {\n            method: 'POST',\n            body: JSON.stringify({\n                userName: this.state.userName,\n                password: this.state.password\n            }),\n            headers: new Headers({\n                'Content-Type': 'application/json'\n            })\n        }).then(response=> response.json())\n            .then(data=> {\n                this.props.updateToken(data.token);\n                // return <Redirect to='/'/>\n            })\n    }\n\n    render() {\n        const{classes} = this.props\n        return (\n            <div>\n                <form onSubmit={(e)=>this.loginUser(e)} className={classes.form} >\n                    <TextField required className={classes.input} id='filled-required' label=\"Username\" variant=\"outlined\" onChange={(e)=>this.setState({userName: (e.target.value)})} />\n                    <TextField type='password' required className={classes.input} id=\"outlined-basic\" label=\"Password\" variant=\"outlined\" onChange={(e)=>this.setState({password: (e.target.value)})} />\n                     <Button className={classes.button} type='submit' variant='contained'>LOG IN</Button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default withStyles(styles)(LoginIndex)","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/BottomNav.tsx",["122","123"],"import React, { Component } from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\nimport { BottomNavigation, BottomNavigationAction, withStyles, WithStyles } from '@material-ui/core';\nimport { AddCircleOutline, MenuBook, Person } from '@material-ui/icons';\nimport { Link } from 'react-router-dom';\n\nconst styles =() =>\n    createStyles({\n        bottomNav: {\n            backgroundColor: '#000A29',\n        },\n        icon: {\n            color: '#FFAE6C'\n        },\n        link: {\n            textDecoration: 'none'\n        }\n    })\n\ninterface Props extends WithStyles<typeof styles>{\n    token: string | null\n}\n\nclass BottomNav extends Component<Props, {}> {\n    constructor(props: Props){\n        super(props)\n    }\n    \n\n    render() {\n        const{classes} = this.props\n\n        return (\n            <BottomNavigation className={classes.bottomNav}>\n                <Link className={classes.link} to='/createRecipe'>\n                    <BottomNavigationAction className={classes.icon} label='Add Recipe' showLabel icon={<AddCircleOutline className={classes.icon} />} />\n                </Link>\n                <Link className={classes.link} to='/getRecipe'>\n                    <BottomNavigationAction className={classes.icon} label='View Recipes' showLabel icon={<MenuBook className={classes.icon} />} />\n                </Link>\n                <Link className={classes.link} to='/userRecipes'>\n                    <BottomNavigationAction className={classes.icon} label='My Recipes' showLabel icon={<Person className={classes.icon} />} />\n                </Link>\n            </BottomNavigation>\n        )\n    }\n}\n\nexport default withStyles(styles)(BottomNav);","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/AppIndex.tsx",[],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/CreateRecipe.tsx",[],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/CreateRecipeIndex.tsx",["124"],"import React, { Component } from \"react\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport APIURL from \"../../helpers/environment\";\nimport { createStyles, withStyles, WithStyles } from \"@material-ui/core/styles\";\nimport {Link} from 'react-router-dom';\n\ninterface RecipeState {\n  recipeName: string;\n  cuisine: string;\n  prepTime: number | null | string;\n  cookTime: number | string;\n  directions: string;\n}\n\nconst styles =()=>\n    createStyles({\n        form: {\n            display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'space-around',\n            height: '60vh',\n            marginBottom: '3vh'\n        },\n        button: {\n            backgroundColor: '#FFAE6C',\n            color: '#000A29',\n            '&:hover': {\n                backgroundColor: '#DF6400',\n              },\n            },\n            link: {\n              textDecoration: 'none'\n          },\n        input: {\n            backgroundColor: '#FFAE6C',\n            borderRadius: '6px',\n            width: '20vw',\n            \"& label.Mui-focused\": {\n              color: \"#000A29\",\n            },\n            \"& .MuiInput-underline:after\": {\n              color: '#000A29'\n            },\n            \"& .MuiOutlinedInput-root\": {\n              \"& fieldset\": {\n                borderColor: \"#000A29\",\n                color: '#000A29'\n              },\n              \"&:hover fieldset\": {\n                borderColor: \"#D76100\",\n                color: '#000A29'\n              },\n              \"&.Mui-focused fieldset\": {\n                borderColor: \"#FFE500\",\n                color: '#000A29'\n              }\n            }\n          },\n          inputDirections: {\n            backgroundColor: '#FFAE6C',\n            borderRadius: '6px',\n            width: '30vw',\n            \"& label.Mui-focused\": {\n              color: \"#000A29\",\n            },\n            \"& .MuiInput-underline:after\": {\n              color: '#000A29'\n            },\n            \"& .MuiOutlinedInput-root\": {\n              \"& fieldset\": {\n                borderColor: \"#000A29\",\n                color: '#000A29'\n              },\n              \"&:hover fieldset\": {\n                borderColor: \"#D76100\",\n                color: '#000A29'\n              },\n              \"&.Mui-focused fieldset\": {\n                borderColor: \"#FFE500\",\n                color: '#000A29'\n              }\n            }\n          }\n    })\n\ninterface Token extends WithStyles<typeof styles>{\n  token: string | null\n}\n\nclass CreateRecipeIndex extends Component<Token, RecipeState> {\n  constructor(props: Token) {\n    super(props);\n    this.state = {\n      recipeName: \"\",\n      cuisine: \"\",\n      prepTime: null,\n      cookTime: 0,\n      directions: \"\",\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"createRecipe didMount: \", this.props.token);\n  }\n\n  createRecipe(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    fetch(`${APIURL}/recipe/create`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        recipeName: this.state.recipeName,\n        cuisine: this.state.cuisine,\n        prepTime: this.state.prepTime,\n        cookTime: this.state.cookTime,\n        directions: this.state.directions,\n      }),\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: `${this.props.token}`,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n      });\n  }\n\n  render() {\n    const{classes} = this.props\n    return (\n      <div>\n        <form className={classes.form} onSubmit={(e) => this.createRecipe(e)}>\n          <TextField\n            className={classes.input}\n            id=\"outlined-basic\"\n            label=\"Recipe Name\"\n            variant=\"outlined\"\n            onChange={(e) => this.setState({recipeName: e.target.value})}\n          />\n          <TextField\n            className={classes.input}\n            id=\"outlined-basic\"\n            label=\"Cuisine\"\n            variant=\"outlined\"\n            onChange={(e) => this.setState({cuisine: e.target.value})}\n          />\n          <TextField\n            className={classes.input}\n            id=\"outlined-basic\"\n            label=\"Prep Time(in mins)\"\n            variant=\"outlined\"\n            type='number'\n            onChange={(e) => this.setState({prepTime: e.target.value})}\n          />\n          <TextField\n            className={classes.input}\n            id=\"outlined-basic\"\n            label=\"Cook Time(in mins)\"\n            variant=\"outlined\"\n            type='number'\n            onChange={(e) => this.setState({cookTime: e.target.value})}\n          />\n          <TextField\n            className={classes.inputDirections}\n            id=\"outlined-basic\"\n            label=\"Directions\"\n            variant=\"outlined\"\n            multiline\n            rowsMax={10}\n            onChange={(e) => this.setState({directions: e.target.value})}\n          />\n            <Button className={classes.button} type=\"submit\" variant=\"contained\">\n            Add Recipe\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(CreateRecipeIndex);","/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/GetRecipeIndex.tsx",[],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/GetRecipe.tsx",[],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/UserRecipesIndex.tsx",[],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/UserRecipes.tsx",[],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/EditRecipeIndex.tsx",[],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/ingredient/CreateIngredient.tsx",[],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/ingredient/CreateIngredientIndex.tsx",[],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/ingredient/GetIngredient.tsx",[],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/ingredient/GetIngredientIndex.tsx",[],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/components/recipe/ingredient/EditIngredient.tsx",[],"/Users/jakemaz/Desktop/redbadge/recipeapp/client/src/helpers/environment.js",["125"],"let APIURL = '';\n\nswitch(window.location.hostname){\n    case 'localhost' || '127.0.0.1':\n        APIURL = 'http://localhost:3210';\n        break;\n    case 'feed-me-recipe-keeper.herokuapp.com':\n        APIURL = 'https://feed-me-recipe-keeper-server.herokuapp.com'\n        // APIURL = 'http://localhost:3210'\n}\n\nexport default APIURL",["126","127"],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":45,"column":21,"nodeType":"134","endLine":45,"endColumn":45},{"ruleId":"135","severity":1,"message":"136","line":8,"column":8,"nodeType":"137","messageId":"138","endLine":8,"endColumn":13},{"ruleId":"132","severity":1,"message":"133","line":55,"column":38,"nodeType":"134","endLine":55,"endColumn":97},{"ruleId":"135","severity":1,"message":"139","line":5,"column":10,"nodeType":"137","messageId":"138","endLine":5,"endColumn":14},{"ruleId":"135","severity":1,"message":"140","line":5,"column":10,"nodeType":"137","messageId":"138","endLine":5,"endColumn":14},{"ruleId":"135","severity":1,"message":"141","line":2,"column":24,"nodeType":"137","messageId":"138","endLine":2,"endColumn":34},{"ruleId":"142","severity":1,"message":"143","line":25,"column":5,"nodeType":"144","messageId":"145","endLine":27,"endColumn":6},{"ruleId":"135","severity":1,"message":"140","line":5,"column":9,"nodeType":"137","messageId":"138","endLine":5,"endColumn":13},{"ruleId":"146","severity":1,"message":"147","line":3,"column":1,"nodeType":"148","messageId":"149","endLine":10,"endColumn":2},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'Admin' is defined but never used.","Identifier","unusedVar","'Home' is defined but never used.","'Link' is defined but never used.","'makeStyles' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]